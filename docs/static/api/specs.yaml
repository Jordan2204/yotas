openapi: 3.0.0
info:
  version: 0.0.0
  title: Yotas API

servers:
  - url: http://localhost:8080/v1
  - url: https://api.yotas.app/v1

security:
  - bearerAuth: [ ]


tags:
  - name: user_model
    x-displayName: User
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Users"/>
  - name: organisation_model
    x-displayName: Organisation
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Organisations"/>
  - name: organisation_user_model
    x-displayName: Organisation User
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/OrganisationUsers"/>
  - name: wallet_model
    x-displayName: Wallet
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Wallets"/>
  - name: operation_model
    x-displayName: Operation
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Operations"/>
  - name: order_model
    x-displayName: Order
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Orders"/>
  - name: order_item_model
    x-displayName: Order Item
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/OrderItems"/>
  - name: article_model
    x-displayName: Article
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Articles"/>




x-tagGroups:
  - name: User Management
    tags:
      - Auth
      - Users
  - name: Organisation
    tags:
      - Organisations
      - OrganisationUsers
      - Wallets
      - Operations
      - Orders
      - OrderItems
      - Articles
  - name: Models
    tags:
      - user_model
      - organisation_model
      - organisation_user_model
      - wallet_model
      - operation_model
      - order_model
      - order_item_model
      - article_model

paths:
  /auth:
    get:
      tags:
        - Auth
      summary: Get Redirection URL
      description: Get authentication URL // TODO - Ecrire une bonne description
      security: [ ]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                type: object
                required:
                  - url
                properties:
                  url:
                    type: string
    post:
      tags:
        - Auth
      summary: Authenticate
      description: Login if the account exists, else create a new account
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - code
                - state
              properties:
                code:
                  type: string
                state:
                  type: string
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                  - token
                properties:
                  user:
                    $ref: "#/components/schemas/Users"
                  token:
                    type: string
        "400":
          description: Invalid state or code
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      type: string

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Retrieve one user
      description: Retrieve informations of a user
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "404":
          $ref: "#/components/responses/404Error"
        "401":
          $ref: "#/components/responses/401Error"
        "403":
          $ref: "#/components/responses/403Error"

  /users/{userId}/deactivate:
    post:
      tags:
        - Users
      summary: Deactivate a user
      description: Deactivate the account. Deactivated account are deleted after 30 days
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        "200":
          description: Account deactivated
        "400":
          description: Cannot deactivate account when it is the only admin of an organisation
        "404":
          $ref: "#/components/responses/404Error"
        "401":
          $ref: "#/components/responses/401Error"
        "403":
          $ref: "#/components/responses/403Error"

  /oranisations:
    get:
      tags:
        - Organisations
      description: List all organisations
      security: [ ]
      parameters:
        - $ref: "#/components/parameters/PageLimit"
        - $ref: "#/components/parameters/PageOffset"
        - $ref: "#/components/parameters/Search"
      responses:
        "200":
          description: successfull response
          content:
            application/json:
              schema:
                type: object
                properties:
                  limit:
                    type: number
                  offset:
                    type: number
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Organisations"

    post:
      tags:
        - Organisations
      description: Create a new organisation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisations"
      responses:
        "200":
          description: successfull response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisations"
        "400":
          $ref: "#/components/responses/400Error"

  /articles:
    get:
      tags:
        - Articles
      summary: List Articles
      security: []
      description: List all articles on the organisation shop
      parameters:
        - $ref: "#/components/parameters/PageLimit"
        - $ref: "#/components/parameters/PageOffset"
        - $ref: "#/components/parameters/Search"
        - $ref: "#/components/parameters/Tenant"
        - name: price_gte
          in: query
          description: The minimum price
          schema:
            type: number
        - name: price_lte
          in: query
          description: The maximum price
          schema:
            type: number
        - name: category
          in: query
          description: Category Id
          schema:
            type: string
        - name: sort
          in: query
          description: The sorting criteria
          schema:
            type: string
            enum:
              - date
              - price
              - popularity
              - name
      responses:
        "200":
          description: Successfull Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  limit:
                    type: number
                  offset:
                    type: number
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Articles"
        "400":
          $ref: "#/components/responses/400TenantError"

    post:
      tags:
        -  Articles
      description: Create an Article
      parameters:
        - $ref: "#/components/parameters/Tenant"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Articles"
      responses:
        "200":
          description: Article Created Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Articles"
        "400":
          $ref: "#/components/responses/400TenantError"
        "401":
          $ref: "#/components/responses/401Error"
        "403":
          $ref: "#/components/responses/403Error"

  /article/{articleId}/:
    get:
      tags:
        - Articles
      security: []
      description: Retrieve an Article
      parameters:
        - $ref: "#/components/parameters/Tenant"
      responses:
        "200":
          description: Successfull Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Articles"
        "400":
          $ref: "#/components/responses/400TenantError"
        "404":
          $ref: "#/components/responses/404Error"

    put:
      tags:
        - Articles
      description: Update the Article
      parameters:
        - $ref: "#/components/parameters/Tenant"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Articles"
      responses:
        "200":
          description: Successfulll Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Articles"
        "400":
          $ref: "#/components/responses/400TenantError"
        "401":
          $ref: "#/components/responses/401Error"
        "403":
          $ref: "#/components/responses/403Error"
        "404":
          $ref: "#/components/responses/404Error"

    delete:
      tags:
        - Articles
      description: Delete an Article
      responses:
        "200":
          description: Article Deleted
        "400":
          $ref: "#/components/responses/400TenantError"
        "401":
          $ref: "#/components/responses/401Error"
        "403":
          $ref: "#/components/responses/403Error"
        "404":
          $ref: "#/components/responses/404Error"

  /organisations/{organisationId}:
    get:
      tags:
        - Organisations
      description: Retrieve organisation infos
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisations"

  /orders:
    post:
      tags:
        - Orders
      description: Create a new Order
      parameters:
        - $ref: "#/components/parameters/Tenant"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Orders"
      responses:
        "200":
          description: Order Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "400":
          $ref: "#/components/responses/400Error"
        "401":
          $ref: "#/components/responses/401Error"

    get:
      description: List orders of an organisation
      tags:
        - Orders
      parameters:
        - $ref: "#/components/parameters/Tenant"
        - $ref: "#/components/parameters/PageLimit"
        - $ref: "#/components/parameters/PageOffset"
        - $ref: "#/components/parameters/Search"
      responses:
        "200":
          description: Orders fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  limit:
                    type: number
                  offset:
                    type: number
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Orders"
        "400":
          $ref: "#/components/responses/400TenantError"
        "401":
          $ref: "#/components/responses/401Error"

  /orders/{orderId}:
    get:
      description: Retrieve an Order
      tags:
        - Orders
      parameters:
        - $ref: "#/components/parameters/Tenant"
      responses:
        "200":
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "400":
          $ref: "#/components/responses/400TenantError"
        "401":
          $ref: "#/components/responses/401Error"
        "403":
          $ref: "#/components/responses/403Error"
        "404":
          $ref: "#/components/responses/404Error"

    put:
      summary: Update an oder
      description: |
        - They can update an order if it is not yet paid
      tags:
        - Orders
      parameters:
        - $ref: "#/components/parameters/Tenant"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Orders"
      responses:
        "200":
          description: "Order updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "400":
          $ref: "#/components/responses/400TenantError"
        "401":
          $ref: "#/components/responses/401Error"
        "403":
          $ref: "#/components/responses/403Error"
        "404":
          $ref: "#/components/responses/404Error"

    delete:
      summary: Delete the order
      description: |
        - An order can be delete if it is canceled or it is not yet paid
        - Only the owner of the command or an admin can delete an order
      tags:
        - Orders
      parameters:
        - $ref: "#/components/parameters/Tenant"
      responses:
        "200":
          description: Order deleted
        "401":
          $ref: "#/components/responses/401Error"
        "403":
          $ref: "#/components/responses/403Error"
        "404":
          $ref: "#/components/responses/404Error"

  /orders/{orderId}/pay:
    post:
      tags:
        - Orders
      summary: Pay an order
      description: |
        The user that create the order can perform this action, when it is done it walled is debited
        of the order total amount
      parameters:
        - $ref: "#/components/parameters/Tenant"
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          description: Payment processed successfully
        "400":
          $ref: "#/components/responses/400Error"
        "401":
          $ref: "#/components/responses/401Error"
        "403":
          $ref: "#/components/responses/403Error"
        "404":
          $ref: "#/components/responses/404Error"

  /orders/{orderId}/process:
    post:
      summary: Process an order
      description: |
        This endpoint is used by an admin to reject or accept an order.
        If the order is rejected, we refund the owner of the order
      tags:
        - Orders
      parameters:
        - $ref: "#/components/parameters/Tenant"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - accepted
              properties:
                reason:
                  type: string
                  example: ok
                accepted:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Order processed
        "400":
          $ref: "#/components/responses/400TenantError"
        "401":
          $ref: "#/components/responses/401Error"
        "403":
          $ref: "#/components/responses/403Error"
        "404":
          $ref: "#/components/responses/404Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Users:
      type: object
      required:
        - name
        - email
        - github_id
      properties:
        id:
          type: number
          readOnly: true
          example: 1
        github_profile:
          type: object
          properties:
            name:
              type: string
              description: User name
              example: John Doe
            email:
              type: string
              description: User email
              example: john.doe@gmail.com
            github_id:
              type: string
              description: Github handle
              example: johndoe
            avatar_url:
              type: string
              description: Url of the user github avatar
              example: https://avatars.githubusercontent.com/u/32160720
        active:
          type: boolean
          description: Activation status
          example: true
        created_at:
          type: string
          description: Creation ISO datetime
          example: '2021-06-02T16:46:45-01:00'
          readOnly: true
        updated_at:
          type: string
          description: Last update ISO datetime
          example: '2021-06-02T16:46:45-01:00'
          readOnly: true

    Organisations:
      type: object
      required:
        - name
        - email
        - description
      properties:
        id:
          type: number
          readOnly: true
          example: 1
        name:
          type: string
          example: OSS Cameroon
        email:
          type: string
          example: osscameroon@gmail.com
        logo:
          type: string
          example: https://avatars.githubusercontent.com/u/73784866
        website:
          type: string
          example: https://osscameroon.com
        description:
          type: string
          maxLength: 2000
          example: Open source society driven by cameroonian developers
        number_of_members:
          type: number
          description: Number of user in the organisation on Yotas
          readOnly: true
          example: 30
        created_at:
          type: string
          example: '2021-06-12T12:06:30-01:00'
          readOnly: true
        updated_at:
          type: string
          example: '2021-06-12T12:06:30-01:00'
          readOnly: true

    OrganisationUsers:
      type: object
      required:
        - organisation_id
        - user_id
        - role
        - active
      properties:
        id:
          type: number
          readOnly: true
          example: 1
        organisation_id:
          type: string
          example: 1
          readOnly: true
        user_id:
          type: string
        role:
          type: string
          enum:
            - admin
            - accounter
            - shoper
            - regular
          example: admin
        active:
          type: boolean
          example: true
        created_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'
        updated_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'

    Wallets:
      type: object
      required:
        - organisation_id
        - wallet_id
        - user_id
      properties:
        id:
          type: string
          readOnly: true
        organisation_id:
          type: string
          readOnly: true
          example: 4
        user_id:
          type: string
          readOnly: true
          example: 2
        wallet_id:
          type: string
          readOnly: true
        balance:
          type: number
          example: 45
          readOnly: true
        created_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'
        updated_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'

    Operations:
      type: object
      required:
        - wallet_id
        - operation_type
        - amount
      properties:
        id:
          type: string
          readOnly: true
        wallet_id:
          type: string
          readOnly: true
        amount:
          type: number
        operation_type:
          type: string
          enum:
            - debit
            - credit
        approved:
          type: boolean
        operation_hash:
          type: string
        created_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'
        updated_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'

    OrderItems:
      type: object
      required:
        - article_id
        - quantity
      properties:
        id:
          type: string
          readOnly: true
          example: 1
        article_id:
          type: string
          example: 4
        article:
          type: object
          readOnly: true
          properties:
            name:
              type: string
              example: Oss stickers
            quantity:
              type: string
              description: Left in stocks
              example: 10
            picture_url:
              type: string
              description: small picture url
              example: https://storage.yotas.app/small.png
        quantity:
          type: number
          example: 2
        created_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'
        updated_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'

    Orders:
      type: object
      required:
        - wallet_id
        - items
      properties:
        id:
          type: number
          readOnly: true
          example: 1
        wallet_id:
          type: number
          example: 2
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItems'
        created_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'
        updated_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'

    Articles:
      type: object
      required:
        - name
        - quantity
        - price
      properties:
        id:
          type: number
          readOnly: True
          example: 1
        name:
          type: string
          example: Oss Stickers
        description:
          type: string
          example: Stickers for Oss open source projects
        quantity:
          type: number
          example: 10
        price:
          type: number
          example: 5
        pictures:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                example: 1
              url:
                readOnly: true
                type: string
                example: https://storage.yotas.app/stickers.jpg
              scale:
                type: string
                readOnly: True
                enum:
                  - small
                  - medium
                  - large
                  - orginal
                example: small
        metadata:
          type: string
        created_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'
        updated_at:
          type: string
          readOnly: true
          example: '2021-06-12T12:40:01-01:00'

  parameters:
    PageLimit:
      name: limit
      in: query
      description: Limits the number of items on a page
      schema:
        type: integer
    PageOffset:
      name: offset
      in: query
      description: Specifies the page number to be displayed
      schema:
        type: integer
    Search:
      name: search
      in: query
      description: Specifies the keyword to look for in displayed items
      schema:
        type: integer
    Tenant:
      name: Tenant
      required: true
      in: header
      description: Id of the organisation for which the request is addressed
      schema:
        type: string

  responses:
    400Error:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              messages:
                type: array
                items:
                  type: string
    401Error:
      description: Access token is missing or invalid
    403Error:
      description: Access forbidden
    404Error:
      description: Resource not  found
    400TenantError:
      description: You must provide Tenant (organisation Id) on Header